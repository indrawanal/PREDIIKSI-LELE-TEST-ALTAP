{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMRkYdSn0N+3wAVwoUjGdYY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/indrawanal/PREDIIKSI-LELE-TEST-ALTAP/blob/main/BARU%20TEST%2011\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S5edLTEG3CmC",
        "outputId": "5e314d79-309c-400d-c6f2-c322bb1040b4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (1.26.4)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.0)\n",
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.17.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.54.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (11.0.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.25)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.25.5)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.67.1)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.17.1)\n",
            "Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.5.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.0)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.10/dist-packages (from keras>=3.2.0->tensorflow) (0.13.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "# Install libraries yang diperlukan\n",
        "!pip install pandas numpy matplotlib seaborn tensorflow scikit-learn"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as snis\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# URL dataset\n",
        "url = 'https://github.com/AryaPratamaPutra-10/Analys_Data_Lele/raw/75a3f74df5b05158dbf856cca04b977a20d67a47/Data_Lele_1.csv'\n",
        "\n",
        "# Membaca dataset\n",
        "df = pd.read_csv(url, sep=';')\n",
        "print(df.head(100))  # Menampilkan 100 baris pertama\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uutqDZcx3HDH",
        "outputId": "2fe6738f-befc-4f53-802e-87371dd7b646"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Id    Provinsi Kabupaten/Kota Jenis Ikan  Tahun  Volume Produksi  \\\n",
            "0  NaN  JAWA BARAT        BANDUNG       LELE   2019          5372785   \n",
            "1  NaN  JAWA BARAT  BANDUNG BARAT       LELE   2019          1328082   \n",
            "2  NaN  JAWA BARAT         BEKASI       LELE   2019          2019121   \n",
            "3  NaN  JAWA BARAT          BOGOR       LELE   2019         89814340   \n",
            "4  NaN  JAWA BARAT         CIAMIS       LELE   2019         18162827   \n",
            "..  ..         ...            ...        ...    ...              ...   \n",
            "95 NaN  JAWA TIMUR      SITUBONDO       LELE   2019           185865   \n",
            "96 NaN  JAWA TIMUR        SUMENEP       LELE   2019           170428   \n",
            "97 NaN  JAWA TIMUR     TRENGGALEK       LELE   2019          4053426   \n",
            "98 NaN  JAWA TIMUR          TUBAN       LELE   2019          2010670   \n",
            "99 NaN  JAWA TIMUR    TULUNGAGUNG       LELE   2019         10006869   \n",
            "\n",
            "    Nilai Produksi   Harga Lele  \n",
            "0      85964560000  16000.00000  \n",
            "1      19921230000  15000.00000  \n",
            "2      34325057000  17000.00000  \n",
            "3    1526843780000  17000.00000  \n",
            "4     236116751000  13000.00000  \n",
            "..             ...          ...  \n",
            "95      3102332000  16691.31897  \n",
            "96      2834916000  16634.09768  \n",
            "97     61868890760  15263.35765  \n",
            "98     34181390000  17000.00000  \n",
            "99    153563838948  15345.84284  \n",
            "\n",
            "[100 rows x 8 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Memuat dataset dari URL GitHub\n",
        "url = 'https://github.com/AryaPratamaPutra-10/Analys_Data_Lele/raw/75a3f74df5b05158dbf856cca04b977a20d67a47/Data_Lele_1.csv'\n",
        "data = pd.read_csv(url, delimiter=';')\n",
        "\n",
        "# Menampilkan beberapa baris pertama dari dataset untuk inspeksi\n",
        "print(data.head())\n",
        "\n",
        "# Memilih hanya kolom numerik untuk perhitungan korelasi\n",
        "numeric_data = data.select_dtypes(include=['float64', 'int64'])\n",
        "\n",
        "# Menghitung korelasi antar variabel numerik\n",
        "correlation_matrix = numeric_data.corr()\n",
        "\n",
        "# Menampilkan korelasi\n",
        "print(\"\\nMatriks Korelasi:\")\n",
        "print(correlation_matrix)\n",
        "\n",
        "# Visualisasi korelasi\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n",
        "plt.title('Matriks Korelasi')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "AOF2akhCODS5",
        "outputId": "894006b2-af51-415e-d9e1-7155306b389b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Id    Provinsi Kabupaten/Kota Jenis Ikan  Tahun  Volume Produksi  \\\n",
            "0 NaN  JAWA BARAT        BANDUNG       LELE   2019          5372785   \n",
            "1 NaN  JAWA BARAT  BANDUNG BARAT       LELE   2019          1328082   \n",
            "2 NaN  JAWA BARAT         BEKASI       LELE   2019          2019121   \n",
            "3 NaN  JAWA BARAT          BOGOR       LELE   2019         89814340   \n",
            "4 NaN  JAWA BARAT         CIAMIS       LELE   2019         18162827   \n",
            "\n",
            "   Nilai Produksi  Harga Lele  \n",
            "0     85964560000     16000.0  \n",
            "1     19921230000     15000.0  \n",
            "2     34325057000     17000.0  \n",
            "3   1526843780000     17000.0  \n",
            "4    236116751000     13000.0  \n",
            "\n",
            "Matriks Korelasi:\n",
            "                 Id     Tahun  Volume Produksi  Nilai Produksi  Harga Lele\n",
            "Id              NaN       NaN              NaN             NaN         NaN\n",
            "Tahun           NaN  1.000000         0.027384        0.054038    0.387378\n",
            "Volume Produksi NaN  0.027384         1.000000        0.985062    0.081105\n",
            "Nilai Produksi  NaN  0.054038         0.985062        1.000000    0.143248\n",
            "Harga Lele      NaN  0.387378         0.081105        0.143248    1.000000\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# Asumsikan dataset Anda bernama 'data'\n",
        "# Pertama, kita akan memisahkan fitur dan target (Harga Lele)\n",
        "X = data[['Tahun', 'Volume Produksi', 'Nilai Produksi']]  # Fitur\n",
        "y = data['Harga Lele']  # Target\n",
        "\n",
        "# Membagi data menjadi training dan testing sets terlebih dahulu (80% train, 20% test)\n",
        "X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)\n",
        "\n",
        "# Membagi sisa data (X_temp dan y_temp) menjadi validation dan test sets (75% validation, 25% test)\n",
        "X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.25, random_state=42, shuffle=False)\n",
        "\n",
        "# Menampilkan jumlah record di masing-masing set\n",
        "print(f'Training set: {X_train.shape[0]} records')\n",
        "print(f'Validation set: {X_val.shape[0]} records')\n",
        "print(f'Test set: {X_test.shape[0]} records')\n"
      ],
      "metadata": {
        "id": "naS31WJSO4rf",
        "outputId": "7e4d32f1-158a-412f-9d67-410a75df764e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training set: 400 records\n",
            "Validation set: 75 records\n",
            "Test set: 25 records\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense\n",
        "\n",
        "# URL dataset\n",
        "url = 'https://github.com/AryaPratamaPutra-10/Analys_Data_Lele/raw/75a3f74df5b05158dbf856cca04b977a20d67a47/Data_Lele_1.csv'\n",
        "\n",
        "# Membaca dataset\n",
        "df = pd.read_csv(url, sep=';')\n",
        "# Memastikan tipe data yang benar\n",
        "df['Tahun'] = df['Tahun'].astype(str)\n",
        "\n",
        "# One-Hot Encoding untuk kolom 'Kabupaten/Kota' dan 'Provinsi'\n",
        "df_encoded = pd.get_dummies(df, columns=['Kabupaten/Kota', 'Provinsi'])\n",
        "\n",
        "# Fitur yang akan digunakan\n",
        "features = ['Volume Produksi', 'Nilai Produksi', 'Harga Lele'] + [col for col in df_encoded.columns if 'Kabupaten/Kota' in col or 'Provinsi' in col]\n",
        "\n",
        "# Menyiapkan data input dan target\n",
        "X = df_encoded[features].values\n",
        "y = df_encoded['Harga Lele'].values  # Target: Harga Lele\n",
        "\n",
        "# Normalisasi data\n",
        "scaler_X = MinMaxScaler()\n",
        "scaler_y = MinMaxScaler()\n",
        "\n",
        "X_scaled = scaler_X.fit_transform(X)  # Menormalisasi fitur\n",
        "y_scaled = scaler_y.fit_transform(y.reshape(-1, 1))  # Menormalisasi target\n",
        "\n",
        "# Membagi data menjadi data latih dan data uji\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)\n",
        "\n",
        "# Mengubah data menjadi bentuk yang sesuai untuk LSTM (samples, time_steps, features)\n",
        "X_train_3d = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))\n",
        "X_test_3d = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))\n",
        "\n",
        "# Membuat model LSTM\n",
        "model = Sequential()\n",
        "model.add(LSTM(50, activation='relu', input_shape=(X_train_3d.shape[1], X_train_3d.shape[2])))\n",
        "model.add(Dense(1))\n",
        "model.compile(optimizer='adam', loss='mean_squared_error')\n",
        "\n",
        "# Latih model\n",
        "history = model.fit(X_train_3d, y_train, epochs=50, batch_size=32, validation_data=(X_test_3d, y_test))\n",
        "\n",
        "# Evaluasi model\n",
        "loss = model.evaluate(X_test_3d, y_test)\n",
        "print(f'Loss pada data uji: {loss}')\n",
        "\n",
        "# Prediksi harga lele ke depan\n",
        "predictions = model.predict(X_test_3d)\n",
        "\n",
        "# Evaluasi hasil prediksi dengan metrik yang lebih lengkap\n",
        "r2_lstm = r2_score(y_test, predictions)\n",
        "mse_lstm = mean_squared_error(y_test, predictions)\n",
        "mae_lstm = mean_absolute_error(y_test, predictions)\n",
        "rmse_lstm = np.sqrt(mse_lstm)\n",
        "\n",
        "# Menampilkan hasil evaluasi\n",
        "print(f'R-squared LSTM: {r2_lstm}')\n",
        "print(f'MSE LSTM: {mse_lstm}')\n",
        "print(f'MAE LSTM: {mae_lstm}')\n",
        "print(f'RMSE LSTM: {rmse_lstm}')\n",
        "\n",
        "# Jika ingin memulihkan hasil prediksi ke skala aslinya\n",
        "predictions_rescaled = scaler_y.inverse_transform(predictions)\n",
        "\n",
        "# Menampilkan prediksi pertama\n",
        "print(predictions_rescaled[:5])  # Tampilkan 5 prediksi pertama dalam skala asli\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GsGEsA65_vA_",
        "outputId": "2df5d264-c747-4b83-e72e-8be484934da0"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/rnn.py:204: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 32ms/step - loss: 0.0777 - val_loss: 0.0512\n",
            "Epoch 2/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0445 - val_loss: 0.0288\n",
            "Epoch 3/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0242 - val_loss: 0.0163\n",
            "Epoch 4/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0125 - val_loss: 0.0126\n",
            "Epoch 5/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0091 - val_loss: 0.0118\n",
            "Epoch 6/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0083 - val_loss: 0.0108\n",
            "Epoch 7/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0067 - val_loss: 0.0101\n",
            "Epoch 8/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 0.0067 - val_loss: 0.0095\n",
            "Epoch 9/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0061 - val_loss: 0.0091\n",
            "Epoch 10/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 0.0048 - val_loss: 0.0086\n",
            "Epoch 11/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0041 - val_loss: 0.0083\n",
            "Epoch 12/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0047 - val_loss: 0.0079\n",
            "Epoch 13/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0041 - val_loss: 0.0077\n",
            "Epoch 14/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0034 - val_loss: 0.0074\n",
            "Epoch 15/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0033 - val_loss: 0.0072\n",
            "Epoch 16/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0031 - val_loss: 0.0070\n",
            "Epoch 17/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0026 - val_loss: 0.0067\n",
            "Epoch 18/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0030 - val_loss: 0.0065\n",
            "Epoch 19/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0028 - val_loss: 0.0063\n",
            "Epoch 20/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0025 - val_loss: 0.0062\n",
            "Epoch 21/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0028 - val_loss: 0.0060\n",
            "Epoch 22/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0025 - val_loss: 0.0058\n",
            "Epoch 23/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0022 - val_loss: 0.0057\n",
            "Epoch 24/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0022 - val_loss: 0.0056\n",
            "Epoch 25/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0021 - val_loss: 0.0053\n",
            "Epoch 26/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0022 - val_loss: 0.0052\n",
            "Epoch 27/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0022 - val_loss: 0.0050\n",
            "Epoch 28/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0025 - val_loss: 0.0049\n",
            "Epoch 29/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0020 - val_loss: 0.0048\n",
            "Epoch 30/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0020 - val_loss: 0.0046\n",
            "Epoch 31/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0018 - val_loss: 0.0044\n",
            "Epoch 32/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0018 - val_loss: 0.0042\n",
            "Epoch 33/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0017 - val_loss: 0.0041\n",
            "Epoch 34/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0016 - val_loss: 0.0040\n",
            "Epoch 35/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0014 - val_loss: 0.0038\n",
            "Epoch 36/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0015 - val_loss: 0.0036\n",
            "Epoch 37/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0014 - val_loss: 0.0035\n",
            "Epoch 38/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 0.0015 - val_loss: 0.0033\n",
            "Epoch 39/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0013 - val_loss: 0.0032\n",
            "Epoch 40/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 0.0011 - val_loss: 0.0030\n",
            "Epoch 41/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 9.8317e-04 - val_loss: 0.0029\n",
            "Epoch 42/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0011 - val_loss: 0.0028\n",
            "Epoch 43/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 9.9586e-04 - val_loss: 0.0026\n",
            "Epoch 44/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 9.5526e-04 - val_loss: 0.0025\n",
            "Epoch 45/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 8.6503e-04 - val_loss: 0.0023\n",
            "Epoch 46/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 7.7552e-04 - val_loss: 0.0022\n",
            "Epoch 47/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 7.2323e-04 - val_loss: 0.0021\n",
            "Epoch 48/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 6.8045e-04 - val_loss: 0.0020\n",
            "Epoch 49/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 6.4073e-04 - val_loss: 0.0019\n",
            "Epoch 50/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 5.2450e-04 - val_loss: 0.0018\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 0.0020 \n",
            "Loss pada data uji: 0.0017597987316548824\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n",
            "R-squared LSTM: 0.9076738786166405\n",
            "MSE LSTM: 0.0017597985649239814\n",
            "MAE LSTM: 0.03057365366781775\n",
            "RMSE LSTM: 0.04194995309799501\n",
            "[[13059.296]\n",
            " [15896.975]\n",
            " [16840.305]\n",
            " [17616.3  ]\n",
            " [12762.632]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history = model.fit(X_train_3d, y_train, epochs=50, batch_size=32, validation_data=(X_test_3d, y_test))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FxkLxuCR3Pwb",
        "outputId": "69c2f1dd-7778-4888-921c-bf1fec8528d7"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.3681e-04 - val_loss: 0.0017\n",
            "Epoch 2/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 5.0576e-04 - val_loss: 0.0016\n",
            "Epoch 3/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 4.4885e-04 - val_loss: 0.0015\n",
            "Epoch 4/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 4.5111e-04 - val_loss: 0.0014\n",
            "Epoch 5/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.5819e-04 - val_loss: 0.0014\n",
            "Epoch 6/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.5991e-04 - val_loss: 0.0013\n",
            "Epoch 7/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.5709e-04 - val_loss: 0.0013\n",
            "Epoch 8/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.1452e-04 - val_loss: 0.0012\n",
            "Epoch 9/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.1105e-04 - val_loss: 0.0011\n",
            "Epoch 10/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 2.7697e-04 - val_loss: 0.0011\n",
            "Epoch 11/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 2.4106e-04 - val_loss: 0.0010\n",
            "Epoch 12/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 2.3294e-04 - val_loss: 9.8900e-04\n",
            "Epoch 13/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.9873e-04 - val_loss: 8.9484e-04\n",
            "Epoch 14/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 1.6506e-04 - val_loss: 8.8847e-04\n",
            "Epoch 15/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.4420e-04 - val_loss: 8.5869e-04\n",
            "Epoch 16/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.3044e-04 - val_loss: 8.2518e-04\n",
            "Epoch 17/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 1.4000e-04 - val_loss: 8.0630e-04\n",
            "Epoch 18/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 1.3633e-04 - val_loss: 7.7343e-04\n",
            "Epoch 19/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 1.1208e-04 - val_loss: 7.4595e-04\n",
            "Epoch 20/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 9.8244e-05 - val_loss: 7.1267e-04\n",
            "Epoch 21/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 1.0921e-04 - val_loss: 7.0780e-04\n",
            "Epoch 22/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 9.1229e-05 - val_loss: 6.7201e-04\n",
            "Epoch 23/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 8.6472e-05 - val_loss: 6.6177e-04\n",
            "Epoch 24/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 8.6607e-05 - val_loss: 6.4554e-04\n",
            "Epoch 25/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 7.4328e-05 - val_loss: 6.1156e-04\n",
            "Epoch 26/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 8.0088e-05 - val_loss: 6.1278e-04\n",
            "Epoch 27/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 6.7837e-05 - val_loss: 5.9181e-04\n",
            "Epoch 28/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 5.9342e-05 - val_loss: 5.8519e-04\n",
            "Epoch 29/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 7.5611e-05 - val_loss: 5.7717e-04\n",
            "Epoch 30/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.5177e-05 - val_loss: 5.6557e-04\n",
            "Epoch 31/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.6792e-05 - val_loss: 5.6337e-04\n",
            "Epoch 32/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 6.6037e-05 - val_loss: 5.3427e-04\n",
            "Epoch 33/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 5.2315e-05 - val_loss: 5.3797e-04\n",
            "Epoch 34/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 4.9533e-05 - val_loss: 5.3720e-04\n",
            "Epoch 35/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step - loss: 5.5609e-05 - val_loss: 5.2137e-04\n",
            "Epoch 36/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 4.7189e-05 - val_loss: 5.1564e-04\n",
            "Epoch 37/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step - loss: 4.1645e-05 - val_loss: 5.2116e-04\n",
            "Epoch 38/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.7008e-05 - val_loss: 5.0456e-04\n",
            "Epoch 39/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 4.3112e-05 - val_loss: 4.9703e-04\n",
            "Epoch 40/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.7957e-05 - val_loss: 4.9404e-04\n",
            "Epoch 41/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - loss: 4.3634e-05 - val_loss: 4.9299e-04\n",
            "Epoch 42/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.7393e-05 - val_loss: 4.8250e-04\n",
            "Epoch 43/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.9323e-05 - val_loss: 4.8345e-04\n",
            "Epoch 44/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 4.0377e-05 - val_loss: 4.8560e-04\n",
            "Epoch 45/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.5022e-05 - val_loss: 4.7021e-04\n",
            "Epoch 46/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.5521e-05 - val_loss: 4.8403e-04\n",
            "Epoch 47/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.9082e-05 - val_loss: 4.8255e-04\n",
            "Epoch 48/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7ms/step - loss: 3.5290e-05 - val_loss: 4.5486e-04\n",
            "Epoch 49/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 4.0033e-05 - val_loss: 4.6110e-04\n",
            "Epoch 50/50\n",
            "\u001b[1m13/13\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 3.4130e-05 - val_loss: 4.7380e-04\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Tampilkan fitur yang digunakan setelah one-hot encoding\n",
        "print(df_encoded.columns)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GQgWvnS7JIKN",
        "outputId": "4f7417a6-a662-4848-b145-38c85e356463"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['Id', 'Jenis Ikan', 'Tahun', 'Volume Produksi', 'Nilai Produksi',\n",
            "       'Harga Lele', 'Kabupaten/Kota_BANDUNG', 'Kabupaten/Kota_BANDUNG BARAT',\n",
            "       'Kabupaten/Kota_BANGKALAN', 'Kabupaten/Kota_BANJARNEGARA',\n",
            "       ...\n",
            "       'Kabupaten/Kota_TEGAL', 'Kabupaten/Kota_TEMANGGUNG',\n",
            "       'Kabupaten/Kota_TRENGGALEK', 'Kabupaten/Kota_TUBAN',\n",
            "       'Kabupaten/Kota_TULUNGAGUNG', 'Kabupaten/Kota_WONOGIRI',\n",
            "       'Kabupaten/Kota_WONOSOBO', 'Provinsi_JAWA BARAT',\n",
            "       'Provinsi_JAWA TENGAH', 'Provinsi_JAWA TIMUR'],\n",
            "      dtype='object', length=109)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss = model.evaluate(X_test_3d, y_test)\n",
        "print(f'Loss pada data uji: {loss}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ve-vb6a53RCW",
        "outputId": "6853d936-f39c-434b-a9e0-18bd6ac7c63e"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 3.8742e-04 \n",
            "Loss pada data uji: 0.00040931545663625\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "r2_lstm = r2_score(y_test, predictions)\n",
        "mse_lstm = mean_squared_error(y_test, predictions)\n",
        "mae_lstm = mean_absolute_error(y_test, predictions)\n",
        "rmse_lstm = np.sqrt(mse_lstm)\n",
        "\n",
        "# Menampilkan hasil evaluasi\n",
        "print(f'R-squared LSTM: {r2_lstm}')\n",
        "print(f'MSE LSTM: {mse_lstm}')\n",
        "print(f'MAE LSTM: {mae_lstm}')\n",
        "print(f'RMSE LSTM: {rmse_lstm}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Z69g1oQ3W5h",
        "outputId": "d217b383-a6f6-4046-a83e-72e406df9fdd"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R-squared LSTM: 0.9130548857075745\n",
            "MSE LSTM: 0.0016572329159550195\n",
            "MAE LSTM: 0.029573062822895714\n",
            "RMSE LSTM: 0.04070912570855605\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions_rescaled = scaler_y.inverse_transform(predictions)\n"
      ],
      "metadata": {
        "id": "Ngyw1vPi3Zz6"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "plt.plot(y_test, label='Data Aktual')\n",
        "plt.plot(predictions, label='Prediksi LSTM', alpha=0.7)\n",
        "plt.title('Prediksi Harga Lele vs Data Aktual')\n",
        "plt.xlabel('Index')\n",
        "plt.ylabel('Harga Lele')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "fmKnUda5XWoJ",
        "outputId": "58e34597-ce24-4c45-c81c-624a97d2e075",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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32Pnzp0VUSMRERGR0ZW6p6lv377YsWMHfvvtN9ja2mLGjBm4ePEiduzYgRdffLEiaiQiIiIyunLN00T/4TxNRERElU+FztNERERE9DSSNaapWrVqUCgUsnZ47969chVEREREZIpkhaZFixZVcBlEREREpk1WaAoODq7oOoiIiIhMWpnGNF29ehXTp0/HkCFDkJycDADYs2cPYmNjDVocERERkakodWg6dOgQvL29ER0djS1btiA9PR0AcObMGcycOdPgBRIRERGZglKHpilTpuDjjz9GeHi4zgN7u3btihMnThi0OCIiIiJTUerQdO7cOfTv37/QcmdnZ9y5c8cgRRERERGZmlKHJkdHRyQmJhZafurUKdSqVcsgRRERERGZmlKHpsGDB2Py5MlISkqCQqGAVqvFsWPH8N577+F///tfRdRIREREZHSlDk2ffvopmjRpAg8PD6Snp8PLywsdO3ZEu3btMG3atIqokYiIiMjoyvzsuevXr+PcuXNIT0/Hs88+i2eeecbQtVUqfPYcERFR5VOav9+yJrfUx8PDAx4eHtL7s2fPonXr1sjOzi7rLomIiIhMlsEe2CuEQF5enqF2R0RERGRSDBaaiIiIiKoyhiYiIiIiGWSPadJoNMWuT0tLK3cxRERERKZKdmhydHSEQqEocr0Qotj1RERERJWZ7NB08ODBiqyDiIiIyKTJDk2dOnWqyDqIiIiITBoHghMRERHJwNBEREREJANDExEREZEMDE1EREREMjA0EREREclQpgf2/vHHH9i0aRMSEhIKPaB3y5YtBimMiIiIyJSUuqdp48aNaNeuHS5evIitW7ciJycHsbGxOHDgANRqdUXUSERERGR0pQ5Nn376Kb788kvs2LEDSqUSixcvRlxcHAYOHIg6depURI1ERERERlfq0HT16lUEBgYCAJRKJTIyMqBQKDBx4kR8++23Bi+QiIiIyBSUOjRVq1ZNejhvrVq1cP78eQBASkoKHjx4YNjqiIiIiExEqQeCd+zYEeHh4fD29sarr76Kd955BwcOHEB4eDi6detWETUSERERGV2pQ9PSpUuRmZkJAJg2bRosLS1x/PhxvPzyy5g+fbrBCyQiIiIyBQohhDB2EVWBRqOBWq1GamoqHBwcjF0OERERyVCav9+l7mnSaDR6lysUCqhUKiiVytLukoiIiMjklTo0OTo6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AgAkJSXpBKb89fnrimuj0Wjw8OHDImubO3cu1Gq19PLw8Cjv4RIREZEJszB2AcXp2bOn9HWLFi3g6+sLT09PbNq0CdbW1kasDJg6dSpCQ0Ol9xqNhsGJiIioCjPpnqbHOTo6olGjRrhy5QpcXV2RnZ2NlJQUnTa3bt2Cq6srAMDV1bXQ3XT570tq4+DgUGwwU6lUcHBw0HkRERFR1VWpQlN6ejquXr0KNzc3+Pj4wNLSEhEREdL6S5cuISEhAX5+fgAAPz8/nDt3DsnJyVKb8PBwODg4wMvLS2pTcB/5bfL3QURERASYeGh67733cOjQIVy7dg3Hjx9H//79YW5ujiFDhkCtVmPEiBEIDQ3FwYMHERMTg2HDhsHPzw/PP/88AKB79+7w8vLC0KFDcebMGezbtw/Tp0/H2LFjoVKpAACjR4/G33//jUmTJiEuLg5ff/01Nm3ahIkTJxrz0ImIiMjEmPSYpn///RdDhgzB3bt34eTkhPbt2+PEiRNwcnICAHz55ZcwMzPDyy+/jKysLAQEBODrr7+Wtjc3N8fOnTsxZswY+Pn5wdbWFsHBwZgzZ47Upl69eti1axcmTpyIxYsXo3bt2li5ciUCAgKe+PESERGR6TLpeZoqE87TREREVPlUqXmaiIiIiEwBQxMRERGRDAxNRERERDIwNBERERHJwNBEREREJANDExEREZEMDE1EREREMjA0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDQxMRERGRDAxNRERERDIwNBERERHJwNBEREREJANDExEREZEMDE1EREREMjA0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDQxMRERGRDAxNRERERDIwNBERERHJwNBEREREJANDExEREZEMDE1EREREMjA0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDQxMRERGRDAxNRERERDIwNBERERHJwNBEREREJANDExEREZEMDE1EREREMjA0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDQxMRERGRDAxNRERERDIwNBERERHJwNBEREREJANDExEREZEMDE1EREREMjA0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQ9ZtmyZahbty6srKzg6+uL33//3dglERERkQlgaCrgp59+QmhoKGbOnIk///wTLVu2REBAAJKTk41dGhERERmZQgghjF2EqfD19UWbNm2wdOlSAIBWq4WHhwfGjx+PKVOmFLutRqOBWq1GamoqHBwcDFdUTiaQlVbOnQhACEChAKAwRFVVl7UjYG5p7CqIiOgJKc3fb4snVJPJy87ORkxMDKZOnSotMzMzg7+/P6Kiogq1z8rKQlZWlvReo9FUTGE3YoDjX1XMvqmwHnOB6vWNXQUREZkghqb/d+fOHeTl5cHFxUVnuYuLC+Li4gq1nzt3LmbPnl3xhSnMStnzoQDweOdhfu+SKLBeX7vH25b2c4prW9w+H6+puH0/vq6kOh7/7IKfoa8m9sQREZF+DE1lNHXqVISGhkrvNRoNPDw8DP9Bnn6PXkRERGRUDE3/r2bNmjA3N8etW7d0lt+6dQuurq6F2qtUKqhUqidVHhERERkZ7577f0qlEj4+PoiIiJCWabVaREREwM+PPT1ERERPO/Y0FRAaGorg4GC0bt0abdu2xaJFi5CRkYFhw4YZuzQiIiIyMoamAgYNGoTbt29jxowZSEpKQqtWrbB3795Cg8OJiIjo6cN5mgykwuZpIiIiogpTmr/fHNNEREREJANDExEREZEMDE1EREREMjA0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDH6NiIPkTq2s0GiNXQkRERHLl/92W84AUhiYDSUtLAwB4eHgYuRIiIiIqrbS0NKjV6mLb8NlzBqLVanHz5k3Y29tDoVAYdN8ajQYeHh64fv06n2tXgXienwye5yeH5/rJ4Hl+ciriXAshkJaWBnd3d5iZFT9qiT1NBmJmZobatWtX6Gc4ODjwF/IJ4Hl+Mnienxye6yeD5/nJMfS5LqmHKR8HghMRERHJwNBEREREJANDUyWgUqkwc+ZMqFQqY5dSpfE8Pxk8z08Oz/WTwfP85Bj7XHMgOBEREZEM7GkiIiIikoGhiYiIiEgGhiYiIiIiGRiaiIiIiGRgaDJxy5YtQ926dWFlZQVfX1/8/vvvxi6pUjl8+DD69OkDd3d3KBQKbNu2TWe9EAIzZsyAm5sbrK2t4e/vj8uXL+u0uXfvHoKCguDg4ABHR0eMGDEC6enpT/AoTN/cuXPRpk0b2Nvbw9nZGf369cOlS5d02mRmZmLs2LGoUaMG7Ozs8PLLL+PWrVs6bRISEhAYGAgbGxs4Ozvj/fffR25u7pM8FJO3fPlytGjRQprcz8/PD3v27JHW8zxXjHnz5kGhUGDChAnSMp7r8ps1axYUCoXOq0mTJtJ6UzvHDE0m7KeffkJoaChmzpyJP//8Ey1btkRAQACSk5ONXVqlkZGRgZYtW2LZsmV618+fPx9fffUVVqxYgejoaNja2iIgIACZmZlSm6CgIMTGxiI8PBw7d+7E4cOHMXLkyCd1CJXCoUOHMHbsWJw4cQLh4eHIyclB9+7dkZGRIbWZOHEiduzYgc2bN+PQoUO4efMmBgwYIK3Py8tDYGAgsrOzcfz4caxduxZhYWGYMWOGMQ7JZNWuXRvz5s1DTEwM/vjjD3Tt2hV9+/ZFbGwsAJ7ninDy5El88803aNGihc5ynmvDaNasGRITE6XX0aNHpXUmd44Fmay2bduKsWPHSu/z8vKEu7u7mDt3rhGrqrwAiK1bt0rvtVqtcHV1FZ9//rm0LCUlRahUKrFhwwYhhBAXLlwQAMTJkyelNnv27BEKhULcuHHjidVe2SQnJwsA4tChQ0KIR+fV0tJSbN68WWpz8eJFAUBERUUJIYTYvXu3MDMzE0lJSVKb5cuXCwcHB5GVlfVkD6CSqVatmli5ciXPcwVIS0sTzzzzjAgPDxedOnUS77zzjhCCP9OGMnPmTNGyZUu960zxHLOnyURlZ2cjJiYG/v7+0jIzMzP4+/sjKirKiJVVHfHx8UhKStI5x2q1Gr6+vtI5joqKgqOjI1q3bi218ff3h5mZGaKjo594zZVFamoqAKB69eoAgJiYGOTk5Oic6yZNmqBOnTo659rb2xsuLi5Sm4CAAGg0GqkXhXTl5eVh48aNyMjIgJ+fH89zBRg7diwCAwN1zinAn2lDunz5Mtzd3VG/fn0EBQUhISEBgGmeYz6w10TduXMHeXl5Oj8IAODi4oK4uDgjVVW1JCUlAYDec5y/LikpCc7OzjrrLSwsUL16dakN6dJqtZgwYQJeeOEFNG/eHMCj86hUKuHo6KjT9vFzre97kb+O/nPu3Dn4+fkhMzMTdnZ22Lp1K7y8vHD69GmeZwPauHEj/vzzT5w8ebLQOv5MG4avry/CwsLQuHFjJCYmYvbs2ejQoQPOnz9vkueYoYmIDGrs2LE4f/68zrgEMqzGjRvj9OnTSE1Nxc8//4zg4GAcOnTI2GVVKdevX8c777yD8PBwWFlZGbucKqtnz57S1y1atICvry88PT2xadMmWFtbG7Ey/Xh5zkTVrFkT5ubmhe4SuHXrFlxdXY1UVdWSfx6LO8eurq6FBt7n5ubi3r17/D7oMW7cOOzcuRMHDx5E7dq1peWurq7Izs5GSkqKTvvHz7W+70X+OvqPUqlEw4YN4ePjg7lz56Jly5ZYvHgxz7MBxcTEIDk5Gc899xwsLCxgYWGBQ4cO4auvvoKFhQVcXFx4riuAo6MjGjVqhCtXrpjkzzNDk4lSKpXw8fFBRESEtEyr1SIiIgJ+fn5GrKzqqFevHlxdXXXOsUajQXR0tHSO/fz8kJKSgpiYGKnNgQMHoNVq4evr+8RrNlVCCIwbNw5bt27FgQMHUK9ePZ31Pj4+sLS01DnXly5dQkJCgs65PnfunE5IDQ8Ph4ODA7y8vJ7MgVRSWq0WWVlZPM8G1K1bN5w7dw6nT5+WXq1bt0ZQUJD0Nc+14aWnp+Pq1atwc3MzzZ9ngw8tJ4PZuHGjUKlUIiwsTFy4cEGMHDlSODo66twlQMVLS0sTp06dEqdOnRIAxMKFC8WpU6fEP//8I4QQYt68ecLR0VFs375dnD17VvTt21fUq1dPPHz4UNpHjx49xLPPPiuio6PF0aNHxTPPPCOGDBlirEMySWPGjBFqtVpERkaKxMRE6fXgwQOpzejRo0WdOnXEgQMHxB9//CH8/PyEn5+ftD43N1c0b95cdO/eXZw+fVrs3btXODk5ialTpxrjkEzWlClTxKFDh0R8fLw4e/asmDJlilAoFGL//v1CCJ7nilTw7jkheK4N4d133xWRkZEiPj5eHDt2TPj7+4uaNWuK5ORkIYTpnWOGJhO3ZMkSUadOHaFUKkXbtm3FiRMnjF1SpXLw4EEBoNArODhYCPFo2oEPP/xQuLi4CJVKJbp16yYuXbqks4+7d++KIUOGCDs7O+Hg4CCGDRsm0tLSjHA0pkvfOQYg1qxZI7V5+PCheOutt0S1atWEjY2N6N+/v0hMTNTZz7Vr10TPnj2FtbW1qFmzpnj33XdFTk7OEz4a0zZ8+HDh6ekplEqlcHJyEt26dZMCkxA8zxXp8dDEc11+gwYNEm5ubkKpVIpatWqJQYMGiStXrkjrTe0cK4QQwvD9V0RERERVC8c0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDQxMRERGRDAxNREQlUCgU2LZtm7HLICIjY2gioiotJCQE/fr1M3YZRFQFMDQRERERycDQRERPjc6dO+Ptt9/GpEmTUL16dbi6umLWrFk6bS5fvoyOHTvCysoKXl5eCA8PL7Sf69evY+DAgXB0dET16tXRt29fXLt2DQAQFxcHGxsb/Pjjj1L7TZs2wdraGhcuXKjIwyOiCsbQRERPlbVr18LW1hbR0dGYP38+5syZIwUjrVaLAQMGQKlUIjo6GitWrMDkyZN1ts/JyUFAQADs7e1x5MgRHDt2DHZ2dujRoweys7PRpEkTLFiwAG+99RYSEhLw77//YvTo0fjss8/g5eVljEMmIgPhA3uJqEoLCQlBSkoKtm3bhs6dOyMvLw9HjhyR1rdt2xZdu3bFvHnzsH//fgQGBuKff/6Bu7s7AGDv3r3o2bMntm7din79+uGHH37Axx9/jIsXL0KhUAAAsrOz4ejoiG3btqF79+4AgN69e0Oj0UCpVMLc3Bx79+6V2hNR5WRh7AKIiJ6kFi1a6Lx3c3NDcnIyAODixYvw8PCQAhMA+Pn56bQ/c+YMrly5Ant7e53lmZmZuHr1qvR+9erVaNSoEczMzBAbG8vARFQFMDQR0VPF0tJS571CoYBWq5W9fXp6Onx8fLB+/fpC65ycnKSvz5w5g4yMDJiZmSExMRFubm5lL5qITAJDExHR/2vatCmuX7+uE3JOnDih0+a5557DTz/9BGdnZzg4OOjdz7179xASEoJp06YhMTERQUFB+PPPP2FtbV3hx0BEFYcDwYmI/p+/vz8aNWqE4OBgnDlzBkeOHMG0adN02gQFBaFmzZro27cvjhw5gvj4eERGRuLtt9/Gv//+CwAYPXo0PDw8MH36dCxcuBB5eXl47733jHFIRGRADE1ERP/PzMwMW7duxcOHD9G2bVu88cYb+OSTT3Ta2NjY4PDhw6hTpw4GDBiApk2bYsSIEcjMzISDgwO+//577N69G+vWrYOFhQVsbW3xww8/4LvvvsOePXuMdGREZAi8e46IiIhIBvY0EREREcnA0EREREQkA0MTERERkQwMTUREREQyMDQRERERycDQRERERCQDQxMRERGRDAxNRERERDIwNBERERHJwNBEREREJANDExEREZEMDE1EREREMvwfsolcKzI7oZgAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import joblib\n",
        "# Menyimpan model\n",
        "model.save('model_lele.h5')\n",
        "\n",
        "# Menyimpan scaler\n",
        "joblib.dump(scaler_X, 'scaler_X.pkl')\n",
        "joblib.dump(scaler_y, 'scaler_y.pkl')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tB5WnGkB32xc",
        "outputId": "6d189083-27b3-46b5-c879-b3a76455966a"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['scaler_y.pkl']"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Mengunduh file model dan scaler\n",
        "\n",
        "files.download('scaler_X.pkl')\n",
        "files.download('scaler_y.pkl')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "_AK1lk1f4gN7",
        "outputId": "c4b7815e-6fc9-46c8-be99-35fed2631fbb"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_c463f50d-4ab4-4393-86f1-96ae62ac024e\", \"scaler_X.pkl\", 4903)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_110d26ae-18ac-48c1-b341-87ef927a4794\", \"scaler_y.pkl\", 719)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install joblib\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VBSrfeJq4HQr",
        "outputId": "30fd0813-1991-4ddf-d339-d286e28353be"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (1.4.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LJ0lmF4x3rcZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# Fungsi untuk melakukan prediksi berurutan (recursive prediction)\n",
        "def predict_future(model, last_known_data, n_years, scaler, input_shape):\n",
        "    predictions = []\n",
        "    current_input = last_known_data\n",
        "\n",
        "    # Lakukan prediksi untuk n_years ke depan\n",
        "    for _ in range(n_years * 12):  # Prediksi bulanan selama 4 tahun (4 tahun * 12 bulan)\n",
        "        # Prediksi harga lele untuk bulan berikutnya\n",
        "        pred = model.predict(current_input.reshape(1, 1, current_input.shape[1]))  # Sesuaikan bentuk input\n",
        "        predictions.append(pred[0][0])  # Ambil prediksi pertama\n",
        "\n",
        "        # Update input untuk bulan berikutnya\n",
        "        current_input = np.roll(current_input, -1, axis=1)  # Geser data input untuk prediksi berikutnya\n",
        "        current_input[0, -1] = pred  # Masukkan prediksi sebagai input baru\n",
        "\n",
        "    # Kembalikan hasil prediksi yang ter-reshape\n",
        "    return np.array(predictions)\n",
        "\n",
        "# Ambil data terakhir untuk prediksi (data uji atau data terakhir dari dataset)\n",
        "last_known_data = X_test_3d[-1]  # Gunakan data terakhir dari X_test\n",
        "\n",
        "# Tentukan jumlah tahun yang ingin diprediksi (misalnya 4 tahun)\n",
        "n_years = 4\n",
        "\n",
        "# Lakukan prediksi untuk 4 tahun ke depan\n",
        "future_predictions = predict_future(model, last_known_data, n_years, scaler, X_train_3d.shape)\n",
        "\n",
        "# Skala kembali prediksi ke harga lele asli\n",
        "future_predictions_rescaled = scaler.inverse_transform(future_predictions.reshape(-1, 1))\n",
        "\n",
        "# Tampilkan hasil prediksi untuk 4 tahun ke depan\n",
        "print(\"Prediksi harga lele 4 tahun ke depan:\")\n",
        "print(future_predictions_rescaled)\n"
      ],
      "metadata": {
        "id": "O_tmcXb0YbHE",
        "outputId": "f902c364-983b-4262-fd81-cec7dc8dd4f4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-7-251f73c29dfe>:17: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n",
            "  current_input[0, -1] = pred  # Masukkan prediksi sebagai input baru\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 31ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 34ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 29ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 18ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 27ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 36ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 30ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 42ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 35ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 38ms/step\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 44ms/step\n",
            "Prediksi harga lele 4 tahun ke depan:\n",
            "[[15476.4795]\n",
            " [13648.748 ]\n",
            " [14926.65  ]\n",
            " [15277.627 ]\n",
            " [15118.492 ]\n",
            " [14026.775 ]\n",
            " [13836.973 ]\n",
            " [15136.829 ]\n",
            " [13406.869 ]\n",
            " [16158.866 ]\n",
            " [14960.715 ]\n",
            " [13940.032 ]\n",
            " [12514.079 ]\n",
            " [15587.135 ]\n",
            " [15116.124 ]\n",
            " [15351.797 ]\n",
            " [14691.933 ]\n",
            " [14483.85  ]\n",
            " [17009.35  ]\n",
            " [15761.956 ]\n",
            " [16215.746 ]\n",
            " [14728.945 ]\n",
            " [15867.274 ]\n",
            " [16586.266 ]\n",
            " [14742.3   ]\n",
            " [14147.337 ]\n",
            " [17422.854 ]\n",
            " [16109.025 ]\n",
            " [18719.443 ]\n",
            " [16071.787 ]\n",
            " [16380.689 ]\n",
            " [16752.77  ]\n",
            " [16424.924 ]\n",
            " [16860.258 ]\n",
            " [17867.95  ]\n",
            " [17775.906 ]\n",
            " [18564.176 ]\n",
            " [17153.768 ]\n",
            " [18323.04  ]\n",
            " [17768.25  ]\n",
            " [17280.055 ]\n",
            " [29013.604 ]\n",
            " [20142.156 ]\n",
            " [19226.723 ]\n",
            " [18411.533 ]\n",
            " [13742.577 ]\n",
            " [18704.775 ]\n",
            " [20754.232 ]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Membuat grafik prediksi harga lele untuk 4 tahun ke depan\n",
        "plt.plot(future_predictions_rescaled, label='Prediksi Harga Lele 4 Tahun Ke Depan')\n",
        "plt.title('Prediksi Harga Lele 4 Tahun Ke Depan')\n",
        "plt.xlabel('Bulan')\n",
        "plt.ylabel('Harga Lele (IDR)')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "nnQU-_NiYldH",
        "outputId": "ae538cbd-219e-44c2-e12e-0be92e743b8a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Mengembalikan prediksi ke skala asli\n",
        "predicted_prices = scaler.inverse_transform(predictions)\n",
        "print(predicted_prices)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BWzCpn47AJAZ",
        "outputId": "ea219bb1-7c30-41b9-be9e-7b7bc21dbcbc"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[12948.518 ]\n",
            " [16217.111 ]\n",
            " [16876.266 ]\n",
            " [17581.748 ]\n",
            " [12784.305 ]\n",
            " [16006.643 ]\n",
            " [14963.588 ]\n",
            " [17577.152 ]\n",
            " [14961.871 ]\n",
            " [17015.719 ]\n",
            " [11794.783 ]\n",
            " [15984.469 ]\n",
            " [19056.12  ]\n",
            " [15539.067 ]\n",
            " [17581.639 ]\n",
            " [17108.822 ]\n",
            " [17656.732 ]\n",
            " [17297.352 ]\n",
            " [28124.812 ]\n",
            " [21711.445 ]\n",
            " [17889.508 ]\n",
            " [19606.508 ]\n",
            " [15499.795 ]\n",
            " [18194.848 ]\n",
            " [17462.924 ]\n",
            " [13416.075 ]\n",
            " [17037.873 ]\n",
            " [14946.754 ]\n",
            " [15803.277 ]\n",
            " [16194.326 ]\n",
            " [18433.43  ]\n",
            " [20048.422 ]\n",
            " [16948.775 ]\n",
            " [16182.2295]\n",
            " [17638.334 ]\n",
            " [18715.865 ]\n",
            " [12917.013 ]\n",
            " [14095.782 ]\n",
            " [11794.87  ]\n",
            " [15760.97  ]\n",
            " [16069.038 ]\n",
            " [18426.148 ]\n",
            " [17554.863 ]\n",
            " [16304.719 ]\n",
            " [16434.965 ]\n",
            " [15070.869 ]\n",
            " [16212.002 ]\n",
            " [14946.532 ]\n",
            " [16202.349 ]\n",
            " [16303.24  ]\n",
            " [16481.174 ]\n",
            " [16102.103 ]\n",
            " [16446.    ]\n",
            " [19021.893 ]\n",
            " [18698.168 ]\n",
            " [17594.127 ]\n",
            " [16603.098 ]\n",
            " [11764.722 ]\n",
            " [12784.05  ]\n",
            " [16500.3   ]\n",
            " [16039.344 ]\n",
            " [17842.646 ]\n",
            " [19574.654 ]\n",
            " [16904.227 ]\n",
            " [18967.88  ]\n",
            " [17067.803 ]\n",
            " [18414.814 ]\n",
            " [17261.84  ]\n",
            " [16648.488 ]\n",
            " [17940.174 ]\n",
            " [17534.582 ]\n",
            " [16972.1   ]\n",
            " [14955.48  ]\n",
            " [16155.392 ]\n",
            " [18397.445 ]\n",
            " [12784.267 ]\n",
            " [16264.854 ]\n",
            " [16439.768 ]\n",
            " [18107.621 ]\n",
            " [17367.678 ]\n",
            " [18335.605 ]\n",
            " [15978.365 ]\n",
            " [15528.85  ]\n",
            " [15572.059 ]\n",
            " [15984.466 ]\n",
            " [15837.361 ]\n",
            " [15485.43  ]\n",
            " [18651.15  ]\n",
            " [18154.25  ]\n",
            " [16585.033 ]\n",
            " [16893.104 ]\n",
            " [16803.639 ]\n",
            " [19444.043 ]\n",
            " [16935.352 ]\n",
            " [19395.031 ]\n",
            " [18738.58  ]\n",
            " [16504.773 ]\n",
            " [16812.904 ]\n",
            " [17754.752 ]\n",
            " [15476.4795]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data.values.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UlnNNVm1yrol",
        "outputId": "8252533c-7ca2-4420-ad6d-a5e438841e98"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(500, 8)\n"
          ]
        }
      ]
    }
  ]
}